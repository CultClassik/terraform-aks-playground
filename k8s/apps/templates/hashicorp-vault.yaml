apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: hashicorp-vault
  namespace: argo-cd
  finalizers:
  - resources-finalizer.argocd.argoproj.io
spec:
  destination:
    server: https://kubernetes.default.svc
    namespace: hashicorp-vault
  project: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
  ignoreDifferences:
    - group: admissionregistration.k8s.io
      kind: MutatingWebhookConfiguration
      jqPathExpressions:
       - .webhooks[]?.clientConfig.caBundle
  source:
    chart: vault
    repoURL: https://helm.releases.hashicorp.com
    targetRevision: 0.21.0
    helm:
      values: |
        global:
          imagePullSecrets: []
          enabled: true
          # TLS for end-to-end encrypted transport
          tlsDisable: true
        injector:
          enabled: true
          # Use the Vault K8s Image https://github.com/hashicorp/vault-k8s/
          image:
            repository: "hashicorp/vault-k8s"
            tag: "latest"

          resources:
              requests:
                memory: 256Mi
                cpu: 250m
              limits:
                memory: 256Mi
                cpu: 250m
        webhook:
          namespaceSelector: {}
        certs:
          # secretName is the name of the secret that has the TLS certificate and
          # private key to serve the injector webhook. If this is null, then the
          # injector will default to its automatic management mode that will assign
          # a service account to the injector to generate its own certificates.
          secretName: null

          # caBundle is a base64-encoded PEM-encoded certificate bundle for the CA
          # that signed the TLS certificate that the webhook serves. This must be set
          # if secretName is non-null unless an external service like cert-manager is
          # keeping the caBundle updated.
          caBundle: ""

          # certName and keyName are the names of the files within the secret for
          # the TLS cert and private key, respectively. These have reasonable
          # defaults but can be customized if necessary.
          certName: tls.crt
          keyName: tls.key
        server:
          image:
            repository: "hashicorp/vault"
            tag: "1.11.2"

            # Overrides the default Image Pull Policy
            pullPolicy: IfNotPresent
            # These Resource Limits are in line with node requirements in the
            # Vault Reference Architecture for a Small Cluster
            resources:
              requests:
                memory: 8Gi
                cpu: 2000m
              limits:
                memory: 16Gi
                cpu: 2000m
          # For HA configuration and because we need to manually init the vault,
          # we need to define custom readiness/liveness Probe settings
          readinessProbe:
            enabled: true
            path: "/v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204"
          livenessProbe:
            enabled: true
            path: "/v1/sys/health?standbyok=true"
            initialDelaySeconds: 60
          # extraEnvironmentVars is a list of extra environment variables to set with the stateful set. These could be
          # used to include variables required for auto-unseal.
          extraEnvironmentVars:
            VAULT_CACERT: /vault/userconfig/tls-ca/ca.crt

          # extraVolumes is a list of extra volumes to mount. These will be exposed
          # to Vault in the path `/vault/userconfig/<name>/`.
          extraVolumes:
            - type: secret
              name: tls-server
            - type: secret
              name: tls-ca
            - type: secret
              name: kms-creds

          # This configures the Vault Statefulset to create a PVC for audit logs.
          # See https://www.vaultproject.io/docs/audit/index.html to know more
          auditStorage:
            enabled: true

          standalone:
            enabled: false

          # Run Vault in "HA" mode.
          ha:
            enabled: true
            # recommended to be 5 or more nodes, using 2 for "lab"
            replicas: 2
            raft:
              enabled: true
              setNodeId: true

              config: |
                ui = true
                listener "tcp" {
                  address = "[::]:8200"
                  cluster_address = "[::]:8201"
                  tls_cert_file = "/vault/userconfig/tls-server/fullchain.pem"
                  tls_key_file = "/vault/userconfig/tls-server/server.key"
                  tls_client_ca_file = "/vault/userconfig/tls-server/client-auth-ca.pem"
                }

                storage "raft" {
                  path = "/vault/data"
                    retry_join {
                    leader_api_addr = "https://vault-0.vault-internal:8200"
                    leader_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"
                    leader_client_cert_file = "/vault/userconfig/tls-server/server.crt"
                    leader_client_key_file = "/vault/userconfig/tls-server/server.key"
                  }
                  retry_join {
                    leader_api_addr = "https://vault-1.vault-internal:8200"
                    leader_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"
                    leader_client_cert_file = "/vault/userconfig/tls-server/server.crt"
                    leader_client_key_file = "/vault/userconfig/tls-server/server.key"
                  }
                  retry_join {
                    leader_api_addr = "https://vault-2.vault-internal:8200"
                    leader_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"
                    leader_client_cert_file = "/vault/userconfig/tls-server/server.crt"
                    leader_client_key_file = "/vault/userconfig/tls-server/server.key"
                  }
                  retry_join {
                      leader_api_addr = "https://vault-3.vault-internal:8200"
                      leader_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"
                      leader_client_cert_file = "/vault/userconfig/tls-server/server.crt"
                      leader_client_key_file = "/vault/userconfig/tls-server/server.key"
                  }
                  retry_join {
                      leader_api_addr = "https://vault-4.vault-internal:8200"
                      leader_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"
                      leader_client_cert_file = "/vault/userconfig/tls-server/server.crt"
                      leader_client_key_file = "/vault/userconfig/tls-server/server.key"
                  }

                  autopilot {
                    cleanup_dead_servers = "true"
                    last_contact_threshold = "200ms"
                    last_contact_failure_threshold = "10m"
                    max_trailing_logs = 250000
                    min_quorum = 5
                    server_stabilization_time = "10s"
                  }

                }

                service_registration "kubernetes" {}

        # Vault UI
        ui:
          enabled: true
          serviceType: "LoadBalancer"
          serviceNodePort: null
          externalPort: 8200

          # For Added Security, edit the below
          #loadBalancerSourceRanges:
          #   - < Your IP RANGE Ex. 10.0.0.0/16 >
          #   - < YOUR SINGLE IP Ex. 1.78.23.3/32 >